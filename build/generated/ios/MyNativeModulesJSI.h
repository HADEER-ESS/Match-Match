/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativeMediaPickerImageReturnData

template <typename P0, typename P1, typename P2, typename P3>
struct NativeMediaPickerImageReturnData {
  P0 uri;
  P1 dominantColor;
  P2 vibrantColor;
  P3 averageColor;
  bool operator==(const NativeMediaPickerImageReturnData &other) const {
    return uri == other.uri && dominantColor == other.dominantColor && vibrantColor == other.vibrantColor && averageColor == other.averageColor;
  }
};

template <typename T>
struct NativeMediaPickerImageReturnDataBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.uri)>(rt, value.getProperty(rt, "uri"), jsInvoker),
      bridging::fromJs<decltype(types.dominantColor)>(rt, value.getProperty(rt, "dominantColor"), jsInvoker),
      bridging::fromJs<decltype(types.vibrantColor)>(rt, value.getProperty(rt, "vibrantColor"), jsInvoker),
      bridging::fromJs<decltype(types.averageColor)>(rt, value.getProperty(rt, "averageColor"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String uriToJs(jsi::Runtime &rt, decltype(types.uri) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String dominantColorToJs(jsi::Runtime &rt, decltype(types.dominantColor) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String vibrantColorToJs(jsi::Runtime &rt, decltype(types.vibrantColor) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String averageColorToJs(jsi::Runtime &rt, decltype(types.averageColor) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "uri", bridging::toJs(rt, value.uri, jsInvoker));
    result.setProperty(rt, "dominantColor", bridging::toJs(rt, value.dominantColor, jsInvoker));
    result.setProperty(rt, "vibrantColor", bridging::toJs(rt, value.vibrantColor, jsInvoker));
    result.setProperty(rt, "averageColor", bridging::toJs(rt, value.averageColor, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeMediaPickerCxxSpecJSI : public TurboModule {
protected:
  NativeMediaPickerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value getMedia(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeMediaPickerCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "NativeMediaPicker";

protected:
  NativeMediaPickerCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeMediaPickerCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeMediaPickerCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeMediaPickerCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value getMedia(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getMedia) == 1,
          "Expected getMedia(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getMedia, jsInvoker_, instance_);
    }

  private:
    friend class NativeMediaPickerCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};


  class JSI_EXPORT NativeTextToSpeechCxxSpecJSI : public TurboModule {
protected:
  NativeTextToSpeechCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value speak(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeTextToSpeechCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "NativeTextToSpeech";

protected:
  NativeTextToSpeechCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTextToSpeechCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeTextToSpeechCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTextToSpeechCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value speak(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::speak) == 1,
          "Expected speak(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::speak, jsInvoker_, instance_);
    }

  private:
    friend class NativeTextToSpeechCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
